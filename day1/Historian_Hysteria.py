from collections import Counter
import os

def total_distance_from_file_list():
    left_list = []
    right_list = []

    # Get the absolute path of the directory where the current script is located
    script_dir = os.path.dirname(os.path.realpath(__file__))
    # Combine the script's directory path with the filename 'puzzleInput.txt'
    file_path = os.path.join(script_dir, "puzzleInput.txt")
    
    try:
        with open(file_path, 'r') as file: # Open the file as read
            # read each line
            for line in file:
                # Split numbers of each line
                numbers = line.strip().split()
                if len(numbers) == 2:  # Should be pairs
                    left_list.append(int(numbers[0]))
                    right_list.append(int(numbers[1]))

        # Calculate a total similarity score by adding up each number in the left list after multiplying it 
        # by the number of times that number appears in the right list.
        similarity_score = calculate_similarity_score(left_list, right_list)    
        
        # Pair up the smallest number in the left list with the smallest number in the right list.
        # For this we have to sort both lists
        left_list.sort()
        right_list.sort()
        
        # To find the total distance between the left list and the right list, add up the distances between all of the pairs you found.
        # The zip() function combines two lists, left_list and right_list, into pairs of elements.
        # This is a generator expression(for l, r in) that iterates over each pair of values from zip(left_list, right_list).
        # The abs() function calculates the absolute difference between l and r.
        # The sum() function calculates the sum of all the values generated by the generator expression.
        total_dist = sum(abs(l - r) for l, r in zip(left_list, right_list))
        
        # returning two values (separated by a comma) from the function as a tuple.
        return total_dist, similarity_score
    except FileNotFoundError:
        print(f"Error: File not found {file_path}")
        return None, None
    
def calculate_similarity_score(left_list, right_list):
    try:
        # Count occurrences of each element in the right list using Counter
        right_count = Counter(right_list)
        
        # Initialize similarity score
        similarity_score = 0
        
        # The first number in the left list is 3. It appears in the right list three times, so the similarity
        # score increases by 3 * 3 = 9.
        # The second number in the left list is 4. It appears in the right list once, so the similarity score 
        # increases by 4 * 1 = 4.
        # For each number in the left list, multiply it by its count in the right list
        for num in left_list:
            similarity_score += num * right_count[num]
        
        return similarity_score
    except Exception as e:
        print(f"Error calculating similarity score: {e}")
        return None
    
total_distance_result, similarity_score_result = total_distance_from_file_list()

if total_distance_result is not None and similarity_score_result is not None:
    print("Total Distance:", total_distance_result)
    print("Similarity Score:", similarity_score_result)
